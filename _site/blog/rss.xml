<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
                <title></title>
                <description></description>              
                <link></link>
                <atom:link href="/rss.xml" rel="self" type="application/rss+xml" />
                
                        <item>
                                <title>Communicating in Code</title>
                                <description>&lt;p&gt;by &lt;a href=&quot;https://plus.google.com/+NickSuch/&quot;&gt;Nick Such&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the Learn To Code movement has certainly picked up steam in the past year, I think it’s interesting to realize that “code” is not something new. What’s new is that we have a strong incentive to learn a particular type of code: billions of people now have Internet-connected computing devices, which we carry around with us wherever we go, and we spend an increasing amount of time using these devices. If we want to interact with these people and influence these people, then we have to communicate with the code (in this case, computer code) that gets their attention. But the notion that coding is something new is a fallacy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Clef#mediaviewer/File:Bass_and_Treble_clef.svg&quot;&gt;&lt;img src=&quot;/img/blog/communicating-music.png&quot; alt=&quot;Musical staff code&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;music&quot;&gt;Music&lt;/h3&gt;

&lt;p&gt;When I’m teaching people to code for the first time, I usually look for metaphors that relate to their prior experiences. One of my go-to examples is music. While both music and software have near universal prevalence today, it seems that more people have experience creating music than software. However, learning to develop software is no more difficult than learning to play and create music. Music provides a great example of another type of code, a programming language, if you will. The building blocks of musical code are things like time signatures, half-notes, and the &lt;a href=&quot;http://en.wikipedia.org/wiki/Clef&quot;&gt;G clef&lt;/a&gt; on a staff. This code can then be executed by any musician wielding an appropriate instrument. In its simplest form, the output is a series of acoustical vibrations at a variety of audible frequencies. Yet, for reasons we don’t fully understand, music’s simple components can be chained together to express pain and sorrow, joy and elation, all without the presence of words. Musical code is indeed a powerful language.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Flea_flicker_(American_football)#mediaviewer/File:FleaFlicker.png&quot;&gt;&lt;img src=&quot;/img/blog/communicating-football.png&quot; alt=&quot;Football playbook code&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;football&quot;&gt;Football&lt;/h3&gt;

&lt;p&gt;Personally, l have a strong mental association between football and code. Perhaps it’s because my first web development gig was as the webmaster for my high school football team. Or maybe it’s because my high school football coach was also my AP Physics teacher, leaving my brain tangled in a mesh of &lt;a href=&quot;http://en.wikipedia.org/wiki/Free_body_diagram&quot;&gt;free-body diagrams&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Student_Body_Right&quot;&gt;student body right&lt;/a&gt; X-and-O sketches. But either way, a football playbook is nothing short of software documentation. The pages are lined with diagrams that would seem peculiar and complex to any uninformed onlooker. Its series of play calls might as well be method calls. And, if sufficiently well-described, these plays could be executed by any other football team, young or old. This code is also constantly vulnerable to security breaches. You may have seen a sideline head coach covering his mouth, or a backup quarterback making a peculiar set of (possibly decoy) gestures. If an opposing team was to discover your playbook, or reverse-engineer your strategies by analyzing your football code’s output (e.g. game film), then they may be able to thwart your intended operations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/communicating-english.png&quot; alt=&quot;English sentence code&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;english&quot;&gt;English&lt;/h3&gt;

&lt;p&gt;It can be really frustrating when you’re a beginning programmer, and you can’t figure out why your For Loop isn’t doing what you expected. You think you have all the parts there, but maybe you swapped a semicolon for a comma, or forgot to increment your iterator. The syntax of a programming language can seem alien at first. You may think that you’ve explained to the computer exactly what it needs to do, but for some reason, it seems to choose a different path. But consider the languages we use to communicate with other human beings. In college, I spent a semester in Budapest, and got to learn the basics of the Hungarian language. It’s much different from the neighboring Germanic, Slavic, and Romance languages. One of the most noticeable changes was the switch to Subject-Object-Verb from English’s &lt;a href=&quot;http://en.wikipedia.org/wiki/Subject%E2%80%93verb%E2%80%93object&quot;&gt;Subject-Verb-Object&lt;/a&gt; orientation. It was easy to explain this difference as “Yoda-speak”. A classic Yoda phrase, “Hard to see the Dark Side is,” would be “The Dark Side is hard to see,” using the English norm. This simple change in the order of these seven words yields incorrect, yet parseable, English. This also illustrates the differing strengths of humans and computers. While computers can use millions of transistors to make billions of calculations per second, they’re notoriously rigid and intolerant of faults. As humans, we’re not quite as fast at number-crunching, but we can find meaning in all sorts of malformed inputs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Computer-aided_design#mediaviewer/File:Schneckengetriebe.png&quot;&gt;&lt;img src=&quot;/img/blog/communicating-manufacturing.png&quot; alt=&quot;Manufacturing diagram code&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;manufacturing&quot;&gt;Manufacturing&lt;/h3&gt;

&lt;p&gt;I always laugh when someone refers to a company that develops a physical product, such as a novel kitchen appliance, as being a “non-tech” startup. The work of mechanical, electrical, and civil engineers is no less technical than that of Facebook app developers. I’ll admit my bias, as a degreed mechanical engineer, but if you’ve ever seen the process through which an idea becomes an automobile, you’ll know it’s nothing short of magic. And in our post-Houdini world, much of what we think is magic is actually code. Annotated CAD drawings, terminology like &lt;a href=&quot;http://en.wikipedia.org/wiki/Pillar_(automobile)&quot;&gt;B-Pillar&lt;/a&gt;, strict adherence to &lt;a href=&quot;http://en.wikipedia.org/wiki/National_Transportation_Safety_Board&quot;&gt;NTSB&lt;/a&gt; standards, and relentless focus on quality are all part of the code that becomes a car. The true accomplishment is that any two cars that roll off an assembly line are remotely similar, much less nearly identical. Those cars are made of thousands of parts sourced from a global supply chain, contain design elements with a legacy older than Henry Ford and younger than &lt;a href=&quot;http://en.wikipedia.org/wiki/Chris_Bangle&quot;&gt;Chris Bangle&lt;/a&gt;, are assembled by the hands of hundreds of people who (Heaven-forbid) might not have a college degree, and still hold tolerances measured in the thousandths of an inch. Did I mention that these cars operate not in a pristine world of silicon, but in a variety of harsh outdoor environments, and are expected to run consistently on the order of decades with minimal maintenance? Cars are definitely made of code.&lt;/p&gt;

&lt;p&gt;What is powerful about our new type of code is the level of expressiveness that it affords us. I can’t manufacture automobiles using football code. While the “&lt;a href=&quot;http://www.youtube.com/watch?v=wpZ3jPMM5Ac&quot;&gt;Battle Hymn of the Republic&lt;/a&gt;” may seem to the contrary, I can’t devise military plans using a Treble Clef. But we can use software code to build time-wasting mobile game apps, and to guide an Earthly vessel to a safe (and spectacular) landing on the planet Mars. Its power lies not in itself, but in us. Code is only as powerful as the human imagination. So my friends, think of all who preceded you in history, who held great ideas yet lacked a truly powerful way to express them globally, instantly. You have a chance, unique to this time in history, to wield a particularly awesome power. So dream big, and use it for good.&lt;/p&gt;

</description>
                                <pubDate>Wed, 29 Oct 2014 00:00:00 -0400</pubDate>
                                <link>/blog/2014/10/29/communicating-in-code/</link>
                                <guid isPermaLink="true">/blog/2014/10/29/communicating-in-code/</guid>
                        </item>
                
                        <item>
                                <title>Kids these days are so…</title>
                                <description>&lt;p&gt;by &lt;a href=&quot;https://plus.google.com/u/0/114667204038993827459/&quot;&gt;Brian Raney&lt;/a&gt;, Co-Founder, Awesome Inc&lt;/p&gt;

&lt;p&gt;SMART. I’ve heard numerous quotes from adults about how kids these days are so lazy, entitled, irresponsible. “The future seems bleak,” we’ll say to one another when we hear about a trouble maker kid that refuses to work hard at school or the student athlete that thinks they don’t have to earn the starting position on the sports team. I’ve murmured these quotes more times than I can remember. &lt;/p&gt;

&lt;p&gt;But this summer, I found myself murmuring something else. I had the pleasure of working closely with over fifty middle and high school students through our &lt;a href=&quot;http://blog.awesomeinc.org/post/97086960346/teaching-kids-to-code-with-awesome-inc-u&quot;&gt;Kids Code Camps&lt;/a&gt; at Awesome Inc. These kids restored my faith in this next generation. They were smart, hard working, and motivated. They couldn’t get enough of the computer programming knowledge that our staff was offering them. &lt;/p&gt;

&lt;p&gt;“Now that we’re done with this game, can we go back to coding?” said one 9-year-old student after finishing a game of ping pong during one of the mid day breaks. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/kids-so-smart.jpg&quot; alt=&quot;Kids take programming class, give us hope for the future&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These kids were eager to learn how to program apps, video games, and web sites. It was a breath of fresh air.&lt;/p&gt;

&lt;p&gt;And, fortunately for these kids, there’s never been a better match between an increasingly popular interest and the skills the workforce needs today! According to the nonprofit Code.org, there are currently more than 150,000 computing jobs available in America. That number is expected to be 1,000,000 by 2020. In Kentucky, there are over 3,500 reported open jobs in computing. Computing jobs have an average starting salary of $60-80K.&lt;/p&gt;

&lt;p&gt;The opportunities get even more interesting if you’re considering using these skills to make &amp;amp; sell your own software instead of someone else’s. Facebook, a company started one decade ago, is worth over $200 billion, while Ford Motor, a leading automobile company that was started over a century ago, is worth about $50 billion. Not bad, Henry Ford, but that means Mark Zuckerberg has created value forty times faster than you (it’s also not a bad place to work - according to a former Awesome Inc team member that now works at Facebook).&lt;/p&gt;

&lt;p&gt;I’ve been inspired watching these kids learn computer science principles and build applications of their own. In 10-20 years, these kids will be building the software that runs our cars, houses, and healthcare systems. So, if you know a kid who might enjoy a future in software development, how do you help him or her get started?&lt;/p&gt;

&lt;p&gt;There are a variety of great learn-to-code opportunities that have shown up on the scene over the past few years. The best place to start is with the Hour of Code from &lt;a href=&quot;http://code.org/&quot;&gt;Code.org&lt;/a&gt;. Over 10 million people got their introduction to coding during this event, which launched last December. Many students get exposed to the Hour of Code in their schools, but the free resources organized by Code.org can be accessed at home on any computer with a web browser. A great next step is the self-guided curriculum from Codecademy.com. This site offers a smooth introduction to a variety of popular programming languages like JavaScript and Ruby. From there, taking in-person courses is a solid option. While only 10% of K-12 schools offer computer courses, there are a variety of other offerings. There are some free options like &lt;a href=&quot;https://coderdojo.com/&quot;&gt;CoderDojo&lt;/a&gt;, as well as paid summer programs like &lt;a href=&quot;http://www.idtech.com/&quot;&gt;iD Tech Camps&lt;/a&gt;, &lt;a href=&quot;http://www.awesomeincu.com/curriculum/#k12-day&quot;&gt;One Day Crash Courses&lt;/a&gt; and semester-long programs like our &lt;a href=&quot;http://awesomeincu.com&quot;&gt;Awesome Inc Academy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kids these days are so smart. Let’s treat them that way and give them the opportunities they deserve.&lt;/p&gt;

</description>
                                <pubDate>Wed, 22 Oct 2014 00:00:00 -0400</pubDate>
                                <link>/blog/2014/10/22/kids-these-days-are-so-smart/</link>
                                <guid isPermaLink="true">/blog/2014/10/22/kids-these-days-are-so-smart/</guid>
                        </item>
                
                        <item>
                                <title>Kentucky Coders Launches At IdeaFestival In Louisville</title>
                                <description>&lt;p&gt;by &lt;a href=&quot;https://plus.google.com/+NickSuch/&quot;&gt;Nick Such&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In 2011, the mayors of Louisville and Lexington got together to form the &lt;a href=&quot;http://www.louisvilleky.gov/BEAM&quot;&gt;Bluegrass Economic Advancement Movement&lt;/a&gt;. Noticing this, my friend and outspoken supporter of all things Kentucky, &lt;a href=&quot;http://www.linkedin.com/pub/grant-mills/2a/904/721&quot;&gt;Grant Mills&lt;/a&gt;, pulled together a group of young entrepreneurs, technologists, and community influencers to form a related BEAM Young Professionals group. Our vision was to use the BEAM initiative as inspiration for defining and sharing what we perceived as needs for the next 20 years of Kentucky’s economy. Our charter came from Louisville Mayor Greg Fischer, who recommended that we “Challenge the status quo”. So while the BEAM committee-proper discussed Advanced Manufacturing, we shifted our focus to other targets, including software development. We proposed the idea that software development &lt;em&gt;is&lt;/em&gt; an advanced form of manufacturing, and advocated for opportunities for educating new programmers in K-12 and beyond. When we started &lt;a href=&quot;http://awesomeincu.com&quot;&gt;Awesome Inc U&lt;/a&gt; last year, that was one of our first steps toward acting on this vision. Last week, another piece of our software mission became reality: &lt;a href=&quot;http://kentuckycoders.com&quot;&gt;Kentucky Coders&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kentuckycoders.com&quot;&gt;&lt;img src=&quot;/img/blog/ky-coders-logo.gif&quot; alt=&quot;Kentucky Coders logo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kentucky Coders is an initiative to get over 1 million Kentuckians to try programming between now the end of the year. The campaign, spearheaded by the &lt;a href=&quot;http://www.advancekentucky.com/&quot;&gt;AdvanceKentucky&lt;/a&gt; team at KSTC, &lt;a href=&quot;http://www.bizjournals.com/louisville/news/2014/10/01/kentucky-coders-campaign-aims-to-promote-coding.html&quot;&gt;kicked off last week&lt;/a&gt; at the annual &lt;a href=&quot;http://ideafestival.com&quot;&gt;IdeaFestival&lt;/a&gt; in Louisville. The campaign utilizes the great programming activities provided by &lt;a href=&quot;http://code.org&quot;&gt;Code.org&lt;/a&gt;, with our efforts building toward Computer Science Education Week in December. Cameron Wilson, COO of Code.org, was on-hand for the announcement last week, along with members of the Kentucky Board of Education, and founders of Kentucky-based technology companies, who emphasized the opportunities for jobs for people with software development skills.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/ky-coders-lobby.jpg&quot; alt=&quot;People learn to code with Kentucky Coders website in lobby at IdeaFestival&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, the Kentucky Coders initiative is primarily an awareness campaign. Anecdotal evidence suggests (I’ve asked this question to hundreds of Governor’s Scholars, teachers, and engineering students from around the state) that most Kentuckians have never met an engineer or software developer. Dr. Lee Todd, &lt;a href=&quot;http://entrepreneurhof.com/lee-todd&quot;&gt;technology entrepreneur&lt;/a&gt; and former president of the University of Kentucky, was part of the announcement last week. Having sold two high-tech companies, he now has quite the perspective on the value of software development. Yet, he often shares the story of how his childhood perspective was much different. Growing up in Western Kentucky, the most high-tech career option he could fathom was to be a science teacher. While we certainly need more science teachers, Dr. Todd’s impact was far greater because he learned from that science teacher and became an engineer. Yet, he wasn’t even aware of that career option until he began his college education and Morehead State University. Later, he transferred to the University of Kentucky as an engineering student, and got to interact with professors doing cutting-edge engineering research. Once again, his eyes were opened to a novel career option. However, Dr. Todd didn’t find his true calling until he started his PhD studies at MIT, where he got to see the great engineering professor &lt;a href=&quot;http://en.wikipedia.org/wiki/Amar_Bose&quot;&gt;Dr. Amar Bose&lt;/a&gt;, who was also the founder of the company that bears his name.&lt;/p&gt;

&lt;p&gt;While it’s not feasible for us to send all of Kentucky’s children to MIT for graduate degrees, it’s also not necessary. There are plenty of engineers, software developers, and founders of technology companies here in Kentucky. We just need to do a better job of sharing our stories and welcoming others into these professions. The Kentucky Coders initiative, which includes hosting Hour of Code sessions at all of Kentucky’s schools, provides a sufficient introduction to the joys of computer science, the educational pathways to pursuing it, and the career opportunities available. If you’re looking for ways to bring coding to your school, town, or organization, check out the &lt;a href=&quot;http://kentuckycoders.com&quot;&gt;Kentucky Coders&lt;/a&gt; site, or &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#105;&amp;#110;&amp;#102;&amp;#111;&amp;#064;&amp;#097;&amp;#119;&amp;#101;&amp;#115;&amp;#111;&amp;#109;&amp;#101;&amp;#105;&amp;#110;&amp;#099;&amp;#117;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;reach out to our team at Awesome Inc U&lt;/a&gt;.&lt;/p&gt;
</description>
                                <pubDate>Tue, 07 Oct 2014 00:00:00 -0400</pubDate>
                                <link>/blog/2014/10/07/launch-of-kentucky-coders/</link>
                                <guid isPermaLink="true">/blog/2014/10/07/launch-of-kentucky-coders/</guid>
                        </item>
                
                        <item>
                                <title>Teaching Teachers How To Teach Coding</title>
                                <description>&lt;p&gt;by &lt;a href=&quot;https://plus.google.com/+NickSuch/&quot;&gt;Nick Such&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Tuesday, I had the privilege of speaking to a group of K-12 teachers and administrators at the &lt;a href=&quot;http://www.kasc.net/2010/?page_id=26&quot;&gt;KASC Conference&lt;/a&gt; in Louisville. KASC has a membership of 800 school councils from around Kentucky which it helps to better serve their respective students through workshops, professional development, and information on topics like curriculum, instructional best practices, and school leadership. &lt;/p&gt;

&lt;p&gt;When I arrived at the conference, I sat in on a talk with Mark Harrell from &lt;a href=&quot;http://www.pltwky.org&quot;&gt;Project Lead The Way&lt;/a&gt; and a group of PLTW students from Hardin County. These students are in PLTW’s engineering curriculum, and were discussing the core pieces of that program, as well as showing off their competition robot. Their engineering instructor described the power of the program: “Our society loves high school football games. Nobody comes to cheer these kids on during a math test, but when we go to robot competitions, parents and students are screaming for their team and it feels like a Friday night.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/kasc-pltw-robot.jpg&quot; alt=&quot;Hardin County PLTW students with robot at KASC Conference 2014&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My presentation at the KASC Conference was on a topic we’ve shared before - How To Host An Hour of Code in Your School. In addition to referencing our &lt;a href=&quot;https://www.udemy.com/hourofcode/&quot;&gt;Udemy course on the Hour of Code&lt;/a&gt;, we also put together &lt;a href=&quot;http://bit.ly/codekasc&quot;&gt;a list of online and local resources&lt;/a&gt; so that teachers can direct their most-interested students to more advanced learning opportunities.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;http://code.org/stats&quot;&gt;Code.org&lt;/a&gt;, 9 out of 10 schools don’t offer a single computer programming class. Our team at Awesome Inc, along with our friends at &lt;a href=&quot;http://www.advancekentucky.com/kycoders?showall=1&amp;amp;limitstart=&quot;&gt;AdvanceKentucky&lt;/a&gt;, PLTW, Newton’s Attic, and others, are working to change this in Kentucky. If we can help with a professional development session for teachers in your school/district, Hour of Code activities for your students, or programming summer camps for your kids, &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#102;&amp;#111;&amp;#117;&amp;#110;&amp;#100;&amp;#101;&amp;#114;&amp;#115;&amp;#064;&amp;#097;&amp;#119;&amp;#101;&amp;#115;&amp;#111;&amp;#109;&amp;#101;&amp;#105;&amp;#110;&amp;#099;&amp;#046;&amp;#111;&amp;#114;&amp;#103;&amp;#063;&amp;#083;&amp;#117;&amp;#098;&amp;#106;&amp;#101;&amp;#099;&amp;#116;&amp;#061;&amp;#065;&amp;#119;&amp;#101;&amp;#115;&amp;#111;&amp;#109;&amp;#101;&amp;#037;&amp;#050;&amp;#048;&amp;#073;&amp;#110;&amp;#099;&amp;#037;&amp;#050;&amp;#048;&amp;#085;&amp;#037;&amp;#050;&amp;#048;&amp;#075;&amp;#045;&amp;#049;&amp;#050;&amp;#037;&amp;#050;&amp;#048;&amp;#116;&amp;#114;&amp;#097;&amp;#105;&amp;#110;&amp;#105;&amp;#110;&amp;#103;&quot;&gt;let us know&lt;/a&gt;.&lt;/p&gt;
</description>
                                <pubDate>Wed, 17 Sep 2014 00:00:00 -0400</pubDate>
                                <link>/blog/2014/09/17/kasc-conference-talk-k12/</link>
                                <guid isPermaLink="true">/blog/2014/09/17/kasc-conference-talk-k12/</guid>
                        </item>
                
                        <item>
                                <title>Teaching Kids to Code - in 1 Week</title>
                                <description>&lt;p&gt;by &lt;a href=&quot;https://plus.google.com/103491752687353303272/&quot;&gt;Ben Jacoby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you‘re looking for the most promising programming talent in Lexington, Awesome Inc has you covered.  There’s only one catch: some of them haven’t gotten to middle school yet.&lt;/p&gt;

&lt;p&gt;This summer, Awesome Inc held three of our Week of Code for kids events. In total, 45 elementary, middle, and high school students learned to code with Awesome Inc.&lt;/p&gt;

&lt;p&gt;Awesome Inc co-founder Nick Such, with the help of several other programming instructors, introduced the students to some of the most important tools and concepts for programming.  In the 4 days of the Week of Code Camp, students learned to program a website, a mobile app, and a video game.&lt;/p&gt;

&lt;p&gt;On day one, the students learned how to make their own websites from scratch in HTML and CSS.  They learned how to select colors with hex values and create a table using only HTML tags.  Then they got a chance to use FTP to upload their files directly to the server that hosted their websites.&lt;/p&gt;

&lt;p&gt;On the second day, they used MIT’s App Inventor to create an Android app that could turn text into speech.  They started by hard-coding their phrases into the app.  Then, they figured out how to receive text input typed by the app’s user.  After they mastered the text-to-speech app, they spent the afternoon creating a Whack-a-Mole app which could be played by clicking on the moles as they appeared.&lt;/p&gt;

&lt;p&gt;On day three, the students used the &lt;a href=&quot;http://www.awesomeincu.com/tutorials/unity-pong/&quot;&gt;Unity Game Engine&lt;/a&gt; to create their own complete replica of Pong.  They each had a 2-player game with working paddles, a ball that bounced off the paddles and walls, and a system to keep score and reset the game when one player won.&lt;/p&gt;

&lt;p&gt;On the final day, each of the kids worked on a project of his/her choosing which they presented to an audience of parents and Awesome Inc staffers at the end of the day.  Some of them chose to make websites, some made apps, while some made different and more complex games in Unity. At the end of the day, every one of them had an impressive final product to show off.  In three hours.  It was awesome.&lt;/p&gt;

&lt;p&gt;If you think this sounds like something that someone you know might be interested, we’re launching another Kids Coding Camp this fall - October 2nd - 5th.  &lt;a href=&quot;https://www.eventbrite.com/e/awesome-inc-kids-code-camp-tickets-12989777775&quot;&gt;Sign up by September 20th to save $200.&lt;/a&gt;  We expect this camp to sell out!  &lt;a href=&quot;https://www.eventbrite.com/e/awesome-inc-kids-code-camp-tickets-12989777775&quot;&gt;Here is the registration page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, a single week is only enough to skim the surface of the world of coding.  That’s why, this fall, Awesome Inc is kicking off the first semester of the &lt;a href=&quot;http://www.awesomeincu.com/curriculum/#academy&quot;&gt;Awesome Inc Academy&lt;/a&gt;.   &lt;/p&gt;

&lt;p&gt;Starting in September and ending in December, the Academy will give student an in-depth look at coding topics.  They’ll work on projects throughout the semester, get an introduction to the theory behind programming, and get one-on-one time with the instructors.  They’ll even have an opportunity to meet industry professionals and learn more about what it’s like to be a professional developer. &lt;/p&gt;

&lt;p&gt;Of course, you don’t have to take it from us that starting early is great for a programmer’s career.  Bill Gates had his first experience with computers when he made a tic-tac-toe game at the age of 13.  Mark Zuckerberg was creating video games in middle school.  Larry Page, co-founder of Google, had two programmers for parents and was surrounded by computers and technology throughout his childhood.  &lt;/p&gt;

&lt;p&gt;There are many other programmers whose life story shows that it’s never too early to start learning to code.  The students at our Code Camp events have been the most creative, attentive, and enthusiastic learners we could have hoped for and they’re off to a great start mastering an invaluable set of skills.  Hopefully, they’ll keep on learning, and in a decade or two they’ll be the professionals we invite back to help inspire the next generation of young programmers!&lt;/p&gt;
</description>
                                <pubDate>Mon, 08 Sep 2014 00:00:00 -0400</pubDate>
                                <link>/blog/2014/09/08/week-of-code-summer-review/</link>
                                <guid isPermaLink="true">/blog/2014/09/08/week-of-code-summer-review/</guid>
                        </item>
                
                        <item>
                                <title>A Swift Overview of Swift</title>
                                <description>&lt;p&gt;by Danny Thorne&lt;/p&gt;

&lt;p&gt;On June 2, 2014 at &lt;a href=&quot;https://developer.apple.com/videos/wwdc/2014/&quot;&gt;WWDC&lt;/a&gt;, Apple announced a new programming language called &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;Swift&lt;/a&gt;. Let’s take a look at why and briefly highlight some of its pros and cons.&lt;/p&gt;

&lt;p&gt;The standard language for Apple iOS and OS X development is &lt;a href=&quot;http://en.wikipedia.org/wiki/Objective-C&quot;&gt;Objective-C&lt;/a&gt;. It is an extension of the original C language, a language that is notoriously difficult to learn and tricky to use. Apple proposes the Swift language as a replacement for Objective-C that is easier to learn and use. At least two other strategies drive its design: it should be interoperable with Objective-C, and it should be fast.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/swift_overview_0.jpg&quot; alt=&quot;Swift playground, image from Apple &amp;copy;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Swift brings language features that are familiar to and welcomed by many programmers today. It supports &lt;a href=&quot;http://en.wikipedia.org/wiki/Tuple&quot;&gt;tuples&lt;/a&gt;, multi-valued expressions that make it easy to write functions that return multiple values and allow shortcuts like assignment statements involving multiple variables. Swift also makes it easy to define functions that accept a variable number of arguments. It supports operator overloading, including custom operators. It supports natural string manipulation like a scripting language. Functions in Swift can be passed to other functions and returned by other functions. Swift is strongly typed, but types can be inferred. Swift includes generics (generic functions and generic types), anonymous parameters ($0, $1, $2, …), default arguments, and elaborate pattern matching in switch statements.&lt;/p&gt;

&lt;p&gt;Swift is designed to make the programmer less error prone. It does array bounds checking, it requires variables always to be initialized, it is &lt;a href=&quot;http://en.wikipedia.org/wiki/Type_safety&quot;&gt;type safe&lt;/a&gt;, it provides flexibility of syntax with semicolons and parens, and it requires the use of braces around the bodies of if-statements and loops (even if the body is a one-liner). It doesn’t include pointers, per se, at least on the surface. Assignment statements cannot be used as conditions in if-statements. In fact, all conditional expressions must be legitimate Boolean expressions. There is no fall-through by default in cases of switch statements. All of these features eliminate common pitfalls in programming.&lt;/p&gt;

&lt;p&gt;Considering the way Swift is designed to feel more like a scripting language than a typical systems language, one might expect to see a trade-off in performance. According to Apple, however, Swift programs run even faster than Objective-C programs. The two benchmark results presented during the announcement at WWDC show Swift running 40% faster in one case and 73% faster in another case relative to Objective-C.&lt;/p&gt;

&lt;p&gt;The most glaring drawback to Swift is the simple fact that it is a new language, and for current iOS and OS X developers there will be an overhead cost to learning the new language and incorporating it into their practice. For businesses, there will be the cost of converting existing Objective-C code to Swift. However, this is mitigated by the way that Apple has developed Swift to work “side-by-side” with Objective-C, so it is not necessary to choose one or the other exclusively. Additionally, Xcode automatically generates Swift versions of Objective-C API headers.&lt;/p&gt;

&lt;p&gt;There are a few things missing in Swift. There is no exception handling. There are currently no concurrency features built in to the Swift language. Swift does not include garbage collection, instead relying on ARC, the same automatic reference counting mechanism used for Objective-C in LLVM. There is currently no access control (e.g., public, private, protected) in user defined types. Some of these omissions will undoubtedly be addressed in future versions.&lt;/p&gt;

&lt;p&gt;It is too early to judge Swift, but, based on the first week of buzz in the community, optimism and excitement prevail for now!&lt;/p&gt;
</description>
                                <pubDate>Tue, 08 Jul 2014 00:00:00 -0400</pubDate>
                                <link>/blog/2014/07/08/swift-overview/</link>
                                <guid isPermaLink="true">/blog/2014/07/08/swift-overview/</guid>
                        </item>
                
                        <item>
                                <title>Community, Video Games, and Childhood Dreams - Let&#39;s Learn Unity</title>
                                <description>&lt;p&gt;By Will Oldham&lt;/p&gt;

&lt;p&gt;In 2013, YouTube hosted an event they called “Geek Week” that showcased and celebrated a subculture of YouTube: the Geeks. Of course over the week there was one day set aside for the celebration of every Geek’s favorite activity - Video Games. On this day, a YouTube channel called Polaris - made famous from game-playing duos like “The Game Grumps” - released a video called “&lt;a href=&quot;http://www.youtube.com/watch?v=SSA84_jW1f4&quot;&gt;MULTIPLAYER - Games bring us together&lt;/a&gt;.” The video is a five minute montage of different YouTube content creators that focus on making videos about video games - from playing them, to talking about them, to criticizing them. It is sometimes difficult to understand why someone would choose to invest their life into something as momentary, as intangible as a video game. The thing that brought these people to do what they do was not a stereotype. It was not that they were lonely kids who had nothing better to do, nor were they avoiding having a real job. It was because they had been part of a community of gamers and wanted to give back. Here were dozens of different groups of people who played together, who worked together, who cared about each other. People who had never met and would never meet felt free to share their lives and their stories. They all were brought together under a simple banner - playing video games. And now, all these ‘YouTubers’ got to create the community they themselves had benefited from. That’s a phenomenal opportunity, and one they constantly talk about how grateful they are to have had. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/learn_unity_0.png&quot; alt=&quot;Multiplayer video on YouTube&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Those relationships are a real part of real communities that are simply awesome things to watch and be a part of. &lt;/p&gt;

&lt;p&gt;But giving back to that community like those YouTubers is hard. Being a member of it is easy and rewarding, but being on the other side - a content creator - that’s difficult. Few people that try to become streamers and YouTubers and &lt;a href=&quot;http://en.wikipedia.org/wiki/Let&#39;s_Play_(video_gaming)&quot;&gt;lets-players&lt;/a&gt; succeed. Few people are able to land a job at a major studio making &lt;a href=&quot;http://en.wikipedia.org/wiki/AAA_(game_industry)&quot;&gt;AAA games&lt;/a&gt;. For a long time, it took an extraordinary amount of time and effort to start creating and sharing. And a lot of luck on top of all that.That has changed. Now, products like Steam and Kickstarter and IndieGoGo are helping independent, at-home game developers become a reality. No longer is it necessary to land a job at a major label to be able to give back to the game community. But no software or company has ushered in this new reality quite as much as &lt;a href=&quot;http://unity3d.com/&quot;&gt;Unity 3D&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The answer as to why is simple - Unity is made for everyone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/learn_unity_1.jpg&quot; alt=&quot;Unity game engine screen shot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unity 3D is a powerful piece of software designed for easy, streamlined game development. The best part is, it can be used by all levels of developers, from those at home, to, as Unity staff hope, a AAA title. Unity is a friendly UI that renders game objects in a 3D or newly added 2D space. Building levels, layouts, characters, and items are as simple as menu choices, importing textures, mouse scaling, or even just importing pre-rendered assets from the Unity Asset store - some for money, some for free. But the real power comes from Unity incorporated scripting elements. Once those objects are rendered, controls and behavior is generated via scripting through the built in IDE &lt;a href=&quot;http://en.wikipedia.org/wiki/MonoDevelop&quot;&gt;MonoDevelop&lt;/a&gt;. Developers can choose between JavaScript, C#, and Boo as scripting languages. MonoDevelop not only supports all three languages and has a killer, easy to use API, but also generates menu options for class fields. Let’s say I need a ball to chase another ball. Instead of scripting in that one ball needs to reference itself as the start point and the other as the end point, I can make two empty variables ‘start’ and ‘end’, use those variables, and later assign what object those variables should reference from the Unity Inspector panel - by dragging and dropping the objects themselves into the menu. And Unity doesn’t just stay on your desktop - almost 40% of mobile games are now developed through Unity. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/learn_unity_2.jpg&quot; alt=&quot;RunJumpDev group&quot; /&gt;&lt;/p&gt;

&lt;p&gt;John Meister, the leader of a local Game Dev group ‘&lt;a href=&quot;http://runjumpdev.org/&quot;&gt;RunJumpDev&lt;/a&gt;’ talks about some of the changes that Unity can bring to the game development world - taking massive game projects from over six-figures to below fifteen-thousand dollars. This integration of a powerful environment with lots of resources combines with the ease of use to give developers a platform that can make an &lt;a href=&quot;http://en.wikipedia.org/wiki/First-person_shooter&quot;&gt;FPS&lt;/a&gt; as easily as it can &lt;a href=&quot;http://en.wikipedia.org/wiki/Pong&quot;&gt;Pong&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And in fact, Unity has been the magic behind the curtain for many games you may have heard of. ‘&lt;a href=&quot;https://itunes.apple.com/us/app/zombieville-usa/id304871622?mt=8&quot;&gt;Zombieville USA&lt;/a&gt;’ was #1 in the App Store for quite a while. The magic that made it happen? Unity. ‘Thomas Was Alone’ was a big hit in the Steam Greenlight program, and I think you can guess what made Thomas tick. That’s right - Unity. You can check out this &lt;a href=&quot;http://makegames.pixelprospector.com/post/44008014149/unity&quot;&gt;this list&lt;/a&gt;, which includes indie game ‘&lt;a href=&quot;http://cardboardcomputer.com/&quot;&gt;Kentucky Route Zero&lt;/a&gt;,’ for a better idea of just what games you’ve been playing that were made with Unity. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.udemy.com/make-a-unity-game-today/&quot;&gt;&lt;img src=&quot;/img/blog/learn_unity_3.jpg&quot; alt=&quot;Logo for Unity course on Udemy&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here at Awesome Inc, and especially Awesome Inc U, we love Unity. It’s the epitome of what we want to see grow in all aspects of technology - the ability for someone at home to sit down and decide to learn to do something, and then do it. If you’ve been designing games for fifteen years, or want to think about starting next week, then Unity has a niche and an opportunity for you. If you’re interested in capitalizing on the opportunity to do something fun and get involved in some great communities - local and otherwise - then check out our own Unity tutorials - they’ll help you hit the ground running, and get you involved that much sooner. If 2D games are your thing, and you miss the days when Atari was as common a name as Coke, then check out our &lt;a href=&quot;http://www.awesomeincu.com/tutorials/unity-pong/&quot;&gt;Make Your Own Pong tutorial&lt;/a&gt;. If you’re all about mobile gaming, and want to jump a bit more into Unity 3D then check out our Udemy-hosted course on &lt;a href=&quot;https://www.udemy.com/make-a-unity-game-today/&quot;&gt;How to build an Angry Boxes game with Unity&lt;/a&gt; - our own adaptation of Angry Birds. Either way, we strongly encourage you to get interested and involved with coding and game design - there’s nothing quite like the communities you’ll find because of it. Good Luck, and Game (Develop) On!&lt;/p&gt;
</description>
                                <pubDate>Fri, 04 Jul 2014 00:00:00 -0400</pubDate>
                                <link>/blog/2014/07/04/community-video-games-dreams-learn-unity/</link>
                                <guid isPermaLink="true">/blog/2014/07/04/community-video-games-dreams-learn-unity/</guid>
                        </item>
                
                        <item>
                                <title>Why 21st Century Kids Should Learn the 21st Century Skill</title>
                                <description>&lt;p&gt;by Sarah Hoffmann&lt;/p&gt;

&lt;p&gt;Code is the language of the 21st century. Computer programming is rapidly becoming an essential skill in every sector of the job world. To put it simply, everyone is doing it. But that begs the question, if coding is so important, why isn’t it being taught in schools?&lt;/p&gt;

&lt;p&gt;While many schools have computer science classes, there is still an overwhelming majority of schools that lack any sort of coding class. Computer science is a growing industry full of opportunities, yet so many kids have little to no exposure to that world. When the idea of adding coding classes to standard curriculum comes up, there are often quite a few common challenges that come up.&lt;/p&gt;

&lt;h2 id=&quot;kids-dont-know-what-coding-is&quot;&gt;Kids don’t know what coding is.&lt;/h2&gt;

&lt;p&gt;That’s fair. As popular and essential as coding is becoming, a lot of kids are still in the dark about what ‘coding’ really is. Code is the “brains” of a computer. A computer’s code is its training manual. It’s how a program knows what to do when a button is pressed, a file is saved, and a window is opened or closed. Everything a computer can do is written in its code. Learning to code is like teaching an animal tricks. Computers can be taught to do math, draw pictures, sort files, search for things, and so much more.&lt;/p&gt;

&lt;h2 id=&quot;coding-is-too-hard-for-kids-to-learn&quot;&gt;Coding is too hard for kids to learn.&lt;/h2&gt;

&lt;p&gt;Coding is difficult; no one is going to deny that. But is it too hard for kids to learn? Not at all. Everything worth doing is hard at one point or another. Learning to code is learning a new language. Like languages, coding languages have rules and exceptions to those rules. There’s a style to it. Each language has different quirks that can make or break an entire program. It takes time and patience; there are basics that come first, but then the creative part comes in and there is an opportunity to make something amazing.&lt;/p&gt;

&lt;h2 id=&quot;coding-is-boring-and-kids-wont-enjoy-it&quot;&gt;Coding is boring and kids won’t enjoy it.&lt;/h2&gt;

&lt;p&gt;Coding can be tedious and time consuming. The idea of spending hours sitting behind a computer may seem daunting to a lot of kids, but that’s because they don’t know what they have the potential to create! Twitter, Instagram, Tumblr, YouTube, Netflix; all of these popular websites were made by computer programmers. Even with very basic coding knowledge, kids can make all kinds of programs that are sure to get them excited and motivated to learn.&lt;/p&gt;

&lt;h2 id=&quot;schools-dont-have-the-resources-to-teach-coding&quot;&gt;Schools don’t have the resources to teach coding.&lt;/h2&gt;

&lt;p&gt;All it takes to have a coding class at any school is a qualified teacher, a computer lab, coding software, and kids who want to be in on the most innovative industry of the 21st century.&lt;/p&gt;

&lt;p&gt;The best way to open up the world of computer programming to kids is through schools or through alternative programs. Showing kids the ins and outs of coding can expose them to the all kinds of possibilities for their futures, as well as teaching them something that can be applied to so many different spectrums of life. There is no doubt that coding is important and will only continue to expand and advance as time passes. If computer science is the future, then it is important that the future generations can learn to love and grow the industry even more.&lt;/p&gt;

&lt;p&gt;A good resource to help introduce kids to coding is through &lt;a href=&quot;http://www.awesomeincu.com/&quot;&gt;Awesome Inc U&lt;/a&gt;. They offer a &lt;a href=&quot;http://www.awesomeincu.com/curriculum/#k12-week&quot;&gt;Coding Camp&lt;/a&gt;, a &lt;a href=&quot;http://www.awesomeincu.com/curriculum/#k12-day&quot;&gt;Day of Code&lt;/a&gt; Program for educators, and &lt;a href=&quot;http://www.awesomeincu.com/register&quot;&gt;one day courses&lt;/a&gt; for individual coding languages.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post originally appeared on the &lt;a href=&quot;http://blog.awesomeinc.org/post/86507708111/why-21st-century-kids-should-learn-the-21st-century&quot;&gt;Awesome Inc blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
                                <pubDate>Wed, 28 May 2014 00:00:00 -0400</pubDate>
                                <link>/blog/2014/05/28/why-21st-century-kids-should-learn-to-code/</link>
                                <guid isPermaLink="true">/blog/2014/05/28/why-21st-century-kids-should-learn-to-code/</guid>
                        </item>
                
                        <item>
                                <title>Our Learning Philosophy at Awesome Inc U</title>
                                <description>&lt;p&gt;by &lt;a href=&quot;https://plus.google.com/+NickSuch?rel=author&quot;&gt;Nick Such&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At &lt;a href=&quot;http://www.awesomeincu.com&quot;&gt;Awesome Inc U&lt;/a&gt;, our goal is not only to create excellent programmers, but also to create a better way of learning. We think the ability to create stuff and solve problems using computer software is a skill with a significant term of usefulness, but some other skill &lt;em&gt;du jour&lt;/em&gt; will eventually replace it. This is why the latter achievement, creating a great way to learn anything, is the more important of our two goals. In addition to the &lt;a href=&quot;http://blog.awesomeinc.org/post/65083231094/core-value-training&quot;&gt;Core Values&lt;/a&gt; we live by at Awesome Inc, we have identified some basic tenets that we’re applying to our Awesome Inc U program.&lt;/p&gt;

&lt;h2 id=&quot;our-strategy-how-to-create-excellent-programmers&quot;&gt;Our Strategy: How to Create Excellent Programmers&lt;/h2&gt;

&lt;p&gt;This strategy is what our core team at Awesome Inc U is working to implement. As we’re designing courses, scheduling summer camps, marketing our products, and coaching our instructors, this is what we keep in mind.&lt;/p&gt;

&lt;h3 id=&quot;step-1-find-great-programmers-to-be-instructors&quot;&gt;Step 1: Find great programmers to be instructors&lt;/h3&gt;

&lt;p&gt;If we’re looking to create excellent programmers, we want to create them in the image of existing excellent programmers. This is our end goal, so this is where we must start. By having these living, breathing examples, our students will get to interact with their end goal. This makes it tangible: when the student can do what the master can do, he or she has made sufficient progress.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/philosophy-instructors.jpg&quot; alt=&quot;Awesome Inc U instructors&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-choose-instructors-who-remember-what-it-was-like-to-not-be-a-programmer&quot;&gt;Step 2: Choose instructors who remember what it was like to not be a programmer&lt;/h3&gt;

&lt;p&gt;Being an expert has a downside: it makes it tough to remember what it was like to be a beginner. Becoming a great programmer means increasing your leverage. You start to use tools like Vim. You have Dotfiles set up so that your environment works the way you want. You use Vagrant like a boss. You speak with fellow programmers in a particular dialect with a particular set of assumptions before beginning any conversation. You follow &lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;style guides for your JavaScript&lt;/a&gt;. You understand enough conventions to choose Convention over Configuration. From a UX design perspective, most of the things you do aren’t visible and discoverable to a first-time user. There are keystroke combinations and subconscious habits that you’ve developed over years of practice. But as a programming instructor, you must understand that for your newest students, everything is foreign. You must remember what that great unknown felt like in order to teach for us. You must have a high capacity for empathy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/philosophy-flow.png&quot; alt=&quot;The Flow diagram, showing Anxiety and Boredom regions&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-3-have-a-goal-in-mind&quot;&gt;Step 3: Have a goal in mind&lt;/h3&gt;

&lt;p&gt;Our students come to us to achieve a goal. They don’t come here to learn Objective-C. They come here to make their dream iPhone app or to land a great job. Our job is to understand their intended destination, then to craft a path to lead them from their current state to their goal. This path will almost certainly adjust as we encounter new obstacles, but if we don’t set an initial goal, we’ll have nothing to measure against. When crafting this path, our team must target an &lt;a href=&quot;http://www.quora.com/Self-Improvement/How-can-I-accelerate-my-personal-growth&quot;&gt;optimal level of difficulty&lt;/a&gt;. Too easy, and our students will get bored. Too difficult, and our students will give up. This is the hard part of being a teacher, and this is the part for which subject-matter experts aren’t often equipped. Fortunately, simply having a feedback loop here is a massive step up from reading a programming book in solitude, or watching a tutorial video on YouTube. In addition to feedback from our instructors, we’ve found that peer interaction is one of the best types of support. Peers offer a valuable perspective as they’re currently working through the same material. Learning-by-teaching is also a great way to demonstrate mastery of a subject.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/philosophy-fun.jpg&quot; alt=&quot;Students playing the Oreo Challenge game&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-4-make-it-fun&quot;&gt;Step 4: Make it fun&lt;/h3&gt;

&lt;p&gt;Fun does not mean idly entertaining. Difficult is fun. Competition is fun. Make a game out of it. At all of our 1-day courses, we take breaks to play games like the &lt;a href=&quot;https://vine.co/v/hQ7bX9mKQiF&quot;&gt;Minute to Win It Oreo Challenge&lt;/a&gt;, Around-The-World Ping Pong, and Rock, Paper, Scissors…War. These games have nothing to do with programming, but they have everything to do with being a programmer. Like any focused, desk-bound task, you’ll go crazy if you don’t get up and move every once in a while. Plus, we think there’s much more to being an effective programmer than slinging code. You need to communicate well, be able to work as part of a team, and know how to follow Rule #17 - Bring the Fun. These set the tone. But the true fun comes from challenging our students with a difficult task, guiding them along the way, and seeing them achieve something that they considered impossible only a short time before.&lt;/p&gt;

&lt;h2 id=&quot;our-tactics-how-to-create-excellent-programmers&quot;&gt;Our Tactics: How to Create Excellent Programmers&lt;/h2&gt;

&lt;p&gt;These tactics are some of the things that we remind our students and teaching assistants. While small, we’ve found that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;If you get stuck, first try to FIO (Figure It Out™) on your own.&lt;/strong&gt; Then ask a peer. Then ask an instructor. Then ask Google.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Projects are more valuable than PowerPoints.&lt;/strong&gt; Trust people who build stuff.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Move Fast And Break Things&lt;/strong&gt;. &lt;a href=&quot;http://startupquote.com/post/1624569753&quot;&gt;Borrowed from Facebook&lt;/a&gt;, this is an embrace of the learning opportunities gained through failure, and is why we have a Failure Dashboard at Awesome Inc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Track your progress.&lt;/strong&gt; It’s hard to tell how far you’ve come if you don’t remember where you’ve been.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Take breaks.&lt;/strong&gt; We play lots of ping pong. We have a piano and guitar readily available. There’s a nice park and several coffee shops near Awesome Inc. Take a walk, clear your mind, come back to find that your seemingly-hard problem is not so bad.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Listen, then talk.&lt;/strong&gt; What does your client want you to build? What is your team member actually asking you for? What does the &lt;a href=&quot;http://www.urbandictionary.com/define.php?term=op&quot;&gt;OP&lt;/a&gt; actually want to know?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Don’t &lt;em&gt;assume&lt;/em&gt; that something is &lt;em&gt;obvious&lt;/em&gt;.&lt;/strong&gt; Avoid using those 2 words, and you’ll drastically improve your communication and empathy skills.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-reading&quot;&gt;Additional Reading&lt;/h2&gt;

&lt;p&gt;The above are just a few guidelines that we’re following as we’re growing Awesome Inc U into a premier training program for technical skills. We’re constantly learning through this process as well, so we hope to add further insights to this list. There are some other great resources out there for improving the learning process. We’re a big fan of the work the &lt;a href=&quot;https://www.khanacademy.org/&quot;&gt;Khan Academy&lt;/a&gt; is doing. Purely online education still has a long way to go, but Sal Khan and his team are thinking about it in the right way. Jeff Casimir’s &lt;a href=&quot;http://blip.tv/rubynation/jeff-casimir-4337403&quot;&gt;How to Teach Anyone Anything&lt;/a&gt; is a great reference, especially for others who are helping people learn to code. But perhaps the best advice comes from my one of my math professors in college. He asked our class a question, which most of us initially thought to be self-serving, but was quite the opposite: “Who’s the best teacher you’ve ever had?” After shooting down a series of answers, he let us know the only answer that he would accept: “You, yourself, are the best teacher you will ever have.”&lt;/p&gt;
</description>
                                <pubDate>Tue, 20 May 2014 00:00:00 -0400</pubDate>
                                <link>/blog/2014/05/20/our-learning-philosophy/</link>
                                <guid isPermaLink="true">/blog/2014/05/20/our-learning-philosophy/</guid>
                        </item>
                
                        <item>
                                <title>University of Pikeville Brings In Awesome Inc For 1-Day iPhone Course</title>
                                <description>&lt;p&gt;by &lt;a href=&quot;https://plus.google.com/116958087401786058743/&quot;&gt;Steve Osowicz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There was a lull in the freezing cold weather, the endless ice and snow. It was the first temperature break in the middle of a brutal winter. The team from Awesome Inc U arrived at the &lt;a href=&quot;http://www.upike.edu/&quot;&gt;University of Pikeville&lt;/a&gt; to get set up for a crash course in iPhone App development. There was some initial concern that some of the participants might forego the iOS course in order to enjoy the beautiful day. However, knowing the significant impact that learning to code could have on their lives, the participants filtered in. The class was filled with people from a variety of backgrounds. There were system administrators, collegiate athletes, high school students and several people who didn’t even know what “&lt;a href=&quot;http://en.wikipedia.org/wiki/Hello_world_program&quot;&gt;Hello World!&lt;/a&gt;” meant. Justin, our Awesome Inc U instructor for the day, kept the class moving at a good pace for the material with plenty of Awesome Inc U teacher assistants frequently helping students when they had a question or needed further clarification.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/pikeville-ios-classroom.jpg&quot; alt=&quot;Classroom for iOS course at UPike&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;learning-by-doing&quot;&gt;Learning By Doing&lt;/h2&gt;

&lt;p&gt;At the end of the class, the students were pleasantly surprised that they all built an actual, functional iPhone App. This was not just theoretical learning – this was a real world exercise in building something that worked. This on-site course covered the curriculum from our &lt;a href=&quot;http://www.awesomeincu.com/curriculum/#ios-crash&quot;&gt;1-Day iOS Crash Course&lt;/a&gt;. Participants with no prior programming experience learn how to navigate the Xcode development environment, pick up the fundamentals of the Objective-C programming language, and implement common iPhone app components like multiple View Controllers, ImageViews, and the Apple MapKit. &lt;/p&gt;

&lt;p&gt;This six-hour course was a great foundation for the students to continue their learning. While the technical content provides solid value, the best part was seeing how excited people became over accomplishing a challenging task and building something tangible. Instilling this confidence in first-time programmers is a key part of our educational philosophy at Awesome Inc U.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog/pikeville-ios-outside.jpg&quot; alt=&quot;Awesome Inc U participants take a stretch break on UPike campus&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As with all our Awesome Inc U courses, we made sure to take a break to stretch out our programming muscles. As programmers ourselves, we’ve come to know that the best way to solve a complex problem is often to walk away, clear your mind, and come back to it. With such a beautiful day, we headed outside to enjoy the beautiful Appalachian surroundings of the University of Pikeville’s campus while our participants shared their favorite jumping jack and yoga algorithms with the group.&lt;/p&gt;

&lt;h2 id=&quot;bring-awesome-inc-u-to-your-organization&quot;&gt;Bring Awesome Inc U To Your Organization&lt;/h2&gt;

&lt;p&gt;While most of our 1-day crash courses are hosted at our headquarters in Lexington, Kentucky, we’ve enjoyed the opportunity to bring on-site courses to various organizations. We’ve been to a few dozen K-12 schools for Hour of Code sessions. In March alone, our team traveled to the University of Pikeville for this iOS App 1-day course (through a partnership with the &lt;a href=&quot;http://kyinnovation.com/&quot;&gt;KY Innovation Network&lt;/a&gt;) and to Dreamhost in Los Angeles, California to present a class on the increasingly-popular static site generator, &lt;a href=&quot;https://www.udemy.com/jekyll-and-github-pages/?couponCode=aincwebsite&quot;&gt;Jekyll&lt;/a&gt;. For many organizations, being able to offer an on-site class makes it easier for their key team members to attend. Along with our live instruction, each course includes supplementary materials like sample code files, course manuals, and screencast videos of your training session.&lt;/p&gt;

&lt;p&gt;Visit us at &lt;a href=&quot;http://www.awesomeincu.com&quot;&gt;www.awesomeincu.com&lt;/a&gt; and check out what we have to offer. Does your school or business need a coding course, however you don’t see one that you need? &lt;a href=&quot;http://awesomeincu.com/info&quot;&gt;Contact our team&lt;/a&gt; and we can build a class to your specifications. One of the great aspects about these classes is that they can be catered to fit your school or company’s needs in terms of content, skill level, and more! Our team is experienced, professional, and ready to assist you with all of your coding educational needs.&lt;/p&gt;
</description>
                                <pubDate>Wed, 23 Apr 2014 00:00:00 -0400</pubDate>
                                <link>/blog/2014/04/23/bring-awesome-to-you-like-pikeville/</link>
                                <guid isPermaLink="true">/blog/2014/04/23/bring-awesome-to-you-like-pikeville/</guid>
                        </item>
                
        </channel>
</rss>